{
  "author": {
    "name": "Dwolla",
    "email": "api@dwolla.com"
  },
  "contributors": [
    {
      "name": "Gordon Zheng",
      "email": "gordon@dwolla.com"
    },
    {
      "name": "David Stancu",
      "email": "david@dwolla.com"
    }
  ],
  "name": "dwolla-node",
  "description": "Official NodeJS Wrapper for Dwolla's API (based off of Kenan Shifflett's node-dwolla library).",
  "version": "1.1.1",
  "repository": {
    "type": "git",
    "url": "git@github.com:Dwolla/dwolla-node.git"
  },
  "license": "MIT",
  "main": "./lib/dwolla.js",
  "engines": {
    "node": ">=0.4.7 <0.9.0"
  },
  "dependencies": {
    "restler": "~3.2"
  },
  "devDependencies": {
    "should": ">=0.6.3",
    "mocha": ">=1.2.2",
    "mockery": "~1.4"
  },
  "scripts": {
    "test": "mocha test/unit"
  },
  "readme": "# dwolla-node: official Dwolla API node.js wrapper \n===========\nBindings for the Dwolla API.  All API methods are asynchronous.\n\nContributions are welcomed with open arms.\n\n## Version\n1.1.1\n\n## Installation\n\n    npm install dwolla-node\n\n## Documentation\n\n[http://developers.dwolla.com/dev/docs](http://developers.dwolla.com/dev/docs)\n\n## Usage\n\nYou'll need [Dwolla API Credentials](https://www.dwolla.com/applications) to interact with the Dwolla API.\n\n```javascript\n// Instantiate a Dwolla API client\nvar Dwolla = require('dwolla-node')(['{CLIENT_ID}', '{CLIENT_SECRET}']);\n\n// Set a user's OAuth token\nDwolla.setToken('[TOKEN]');\n\n// Use the Sandbox API environment, instead of production\nDwolla.sandbox = true;\n\n// Send money to a Dwolla ID: 812-626-8794\nDwolla.send('[PIN]', '812-626-8794', 1.00, function(error, transactionId) {\n    if(error) { console.log('Error: ' + error); }\n\n    console.log('Transaction ID: ' + transactionId);\n});\n```\n    \n## Examples / Quickstart\n\nThis repo includes various usage examples, including:\n\n* Authenticating with OAuth [oauth.js]\n* Sending money [send.js]\n* Fetching account information [accountInfo.js]\n* Grabbing a user's contacts [contacts.js]\n* Listing a user's funding sources [fundingSources.js]\n* Creating Gateway Checkout sessions [checkouts.js]\n* Enable or check an account's Auto-Withdrawal feature [autoWithdrawal.js]\n* Fetch a user's account balance [balance.js]\n* Listing or searching a user's contacts [contacts.js]\n* Creating a money request, and listing a user's pending money requests [requests.js]\n* Getting transactions, transaction statistics, and processing refunds [transactions.js]\n* Creating a MassPay job, retrieving jobs, and their items [masspay.js]\n\n## Methods\n\nHelper Methods:\n\n    setToken(oauth_token)   ==> (bool) did the access token change sucessfully?\n    getToken()              ==> (string) the currently used oauth access token\n\nAuthentication Methods:\n\n    authUrl([redirect_uri, scope])          ==> (string) OAuth permissions page URL\n    finishAuth(code[, redirect_uri, fn])  ==> (object) access_token, refresh_token, expiration times\n    refreshAuth(refresh_token, fn)      ==> (object) access_token, refresh_token, expiration times\n\nAccount Methods:\n\n    basicAccountInfo(id, fn)                    ==> (object) user profile for given email address or Dwolla ID\n    fullAccountInfo(fn)                         ==> (object) the user entity associated with the token\n    balance(fn)                                 ==> (string) the Dwolla balance of the account associated with the token\n    toggleAutoWithdraw(enabled, fundingId, fn)  ==> (object) current {Enabled, FundingId}\n    getAutoWithdrawalStatus(fn)                 ==> (object) current {Enabled, FundingId}\n\nContacts Methods:\n\n    contacts(params, fn)            ==> (array) list of contacts matching the search criteria\n    nearby(lat, lon, params, fn)    ==> (array) list of nearby spots matching the search criteria\n    \nFunding Sources Methods:\n\n    fundingSources(fn)          ==> (array) a list of funding sources associated with the token\n    fundingSourceById(id, fn)   ==> (object) information about the {$id} funding source\n    addFundingSource(account_number, routing_number, account_type, name, fn)    ==>  (object) the new, unverified funding source resource\n    verifyFundingSource(deposit1, deposit2, fundingId, fn)  ==> (object) funding source resource\n    withdrawToFundingSource(pin, amount, fundingId, fn)  ==> (object) the resulting Withdraw transaction\n    depositFromFundingSource(pin, amount, fundingId, fn) ==> (object) the resulting Deposit transaction\n\nTransactions Methods:\n\n    send(pin, destinationId, amount, params, fn)    ==> (string) transaction ID\n    transactionById(id, fn)                         ==> (object) transaction details\n    transactions(params, fn)                        ==> (array) a list of transactions matching the search criteria\n    transactionsByApp(params, fn)                   ==> (array) a list of transactions facilitated by the application, matching the search criteria\n    transactionsStats(params, fn)                   ==> (object) statistics about the account associated with the token\n    refund(pin, transactionId, fundsSource, amount, params, fn)         => (object) resulting Refund transaction resource\n    \nMoney Request Methods:\n\n    request(pin, sourceId, amount, params, fn)      ==> (string) request ID\n    requests(params, fn)        ==> (array) list of Request resources\n    requestById(request_id, fn)     ==> (object) a Request resource\n    cancelRequest(request_id, fn)   ==> (bool) true if successfully cancelled, otherwise, error \n    fulfillRequest(pin, request_id, amount, params, fn)     ==> (object) the Request resource\n\nMassPay Methods:\n\n    createMassPayJob(fundsSource, pin, items, params, fn)       ==> (object) resulting MassPay Job\n    getMassPayJobs(fn)      ==> (array) list of MassPay Jobs\n    getMassPayJob(job_id, fn)       ==> (object) MassPay Job \n    getMassPayJobItems(job_id, fn)      ==> (array) list of the job's Items\n    getMassPayJobItem(job_id, item_id, fn)      ==> (object) a particular job's Item\n\nOffsite Gateway Methods:\n\n    createCheckout(redirect, purchaseOrder, params, fn)     ==> (object) contains checkoutId and checkoutURL parameters\n    getCheckout(checkoutId, fn)     ==> (object) checkout object\n    completeCheckout(checkoutId, fn)        ==> (object) results of the checkout\n    verifyGatewaySignature(signature, checkout_id, amount)      ==> (bool) is signature valid?\n\n## Changelog\n\n1.1.1\n* Change module name to 'dwolla-node'\n\n1.1.0\n* Add unit tests to validate HTTP requests\n* Add support for Auto-Withdrawal endpoints\n* Add support for new expiring OAuth access tokens and refresh tokens\n* Add support for adding funding sources, verifying them, withdraw, deposit\n* Add support for Money requests listing, cancel, fulfill, lookup\n* Refactor Off-Site Gateway implementation\n\n1.0.2\n* Add support for MassPay\n* Remove Register endpoint binding, since that's been deprecated\n* Remove debug console output from helper.js\n* Don't require app key and secret to be passed into requestToken, use credentials previously set during module instantiation instead.\n\n1.0.1\n\n* Add support for offsite gateway's guest checkout mode\n\n1.0.0\n\n* First revision of major refactor\n\n## Tests\n\nTo run unit tests, do:\n    \n`mocha ./test/unit`\n\nCurrently, unit tests only ensure HTTP requests created by the bindings are valid.  We plan to add support for testing sample API responses against the bindings.  Eventually, we'd also like to support live testing against the sandbox API.\n\n## Credits\n\nThis wrapper is a forked extension of Kenan Shifflett's 'node-dwolla' module.  Michael Schonfeld did much of the initial refactoring of `node-dwolla`.\n\n- Kenan Shifflett &lt;kenan.shifflett@gmail.com&gt;\n- Gordon Zheng &lt;gordon@dwolla.com&gt;\n- David Stancu &lt;david@dwolla.com&gt;\n- Michael Schonfeld &lt;michael@schonfeld.org&gt;\n\n## Support\n\n- Dwolla Developer Support &lt;devsupport@dwolla.com&gt;\n\n## TODO\n\n1. Use `nock` module to mock `http` instead of mocking `restler` with `mockery` because the former lets us validate restler's behavior, which we are today assuming will always work as expected.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Dwolla/dwolla-node/issues"
  },
  "homepage": "https://github.com/Dwolla/dwolla-node",
  "_id": "dwolla-node@1.1.1",
  "_shasum": "aea0a980b361742ee0e121a322f7c93f20cfb99b",
  "_from": "dwolla-node@",
  "_resolved": "https://registry.npmjs.org/dwolla-node/-/dwolla-node-1.1.1.tgz"
}
